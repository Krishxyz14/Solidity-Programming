// SPDX-License-Identifier: MIT

 pragma solidity ^0.8.0; 

contract A {
    uint public a = 10;
    address public add = msg.sender;

    function fun1() public pure returns(string memory)
    {
      return "I am in contract A";
    }
    function fun2() public pure returns(string memory)
    {
      return "I am in contract A";
    }
    function fun3() public pure virtual returns(string memory)// virtual is used to give permission from contract A to B to upadate A
    {
      return "I am in contract A";
    }
    function fun4() public pure virtual returns(string memory)
    {
      return "I am in contract A";
    }
}
contract B is A{   // contract A is parent of contract B
  function fun3() public pure override returns(string memory) // override is used to modifie fun3() in contract A
    {
      return "I am in contract B";
    }
    function fun4() public pure virtual override returns(string memory)// virtual is used to give permission to next contract to change in it 
                                                                     // override is used to change
 {
     return "I am in contract B";
 }
 }
 contract C is B{
     function fun4() public pure override returns(string memory)// override is used to change
 {
     return "I am in contract C";
 }
 }
